# 自动化的名称
name: 容器
# on字段指定触发 workflow 的条件，通常是某些事件。
on:
	# 手动触发工作流 比如在窗口添加一个按钮
  repository_dispatch:
  # orkflow_dispatch 事件 最多可以定义 10 个 inputs
  workflow_dispatch:
  	# 提供一个按钮
    inputs:
    	# 按钮的名称 可以调用 github.event.inputs.ssh 来获取输入的变量值
      ssh:
      	# 按钮的标题
        description: 'SSH 连接Actions'
        # 定义是否为必须填写
        required: false
        # 默认不是必须填写
        default: 'false'
    # 可以在发生 push 事件时运行工作流。
    push:
      # 在计划的时间触发工作流
      schedule:
        - cron: 0 */18 * * *
# 设置环境变量 调用方式:$变量名  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config-x86-Lean
  DIY_SH: diy-x86-Lean.sh
  SSH_ACTIONS:  false
  TZ: Asia/Shanghai
# 执行的一项或多项任务。
jobs:
	# jobs ID 自定义 一项任务就一个 ID 
  build:
  	#  字段指定任务运行所需要的虚拟服务器环境
    runs-on: ubuntu-20.04
    # 判断是仓库持有者
    if: github.event.repository.owner.id == github.event.sender.id
		# 
    steps:
    - name: 拉取分支
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get update
          sudo -E apt-get -y install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "$TZ" 
          export FORCE_UNSAFE_CONFIGURE=1
    - name: SSH连接到操作
      uses: itwuge/Actions@master
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    - name: 固件编译
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        cp -f .config ./bin/targets/*/*/
        
    - name: 整理编译文件
      run: |
        cd openwrt
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        rm -rf $(find ./bin/targets/ -type d -name "packages")
        cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

    - name: 上传软件安装包
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt_package
        path: ./openwrt/artifact/package/

    - name: 上传构建信息
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt_buildinfo
        path: ./openwrt/artifact/buildinfo/

    - name: 上传固件
      uses: actions/upload-artifact@v3
      with:
        name: OpenWrt_firmware
        path: ./openwrt/bin/targets/
